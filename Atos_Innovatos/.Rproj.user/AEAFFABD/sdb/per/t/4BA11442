{
    "collab_server" : "",
    "contents" : "############################################################\n# Supporting functions file for the Innovatos 2017 demo app\n\n# Date: 08-Mar-2017\n# Author: Marcel van den Bosch <marcel.vandenbosch@atos.net>\n############################################################\nlibrary(shinyBS)\nlibrary(sm)\nlibrary(pastecs)\nlibrary(DMwR)\nlibrary(corrplot)\nlibrary(caret)\nlibrary(xgboost)\n\noptions(scipen=100)\noptions(digits=2)\noptions(shiny.maxRequestSize=30*1024^2)\n\n\n\nloadData1 <- function(file1,header,sep,quote)\n{\n  data <- read.csv(file1,header=header,sep = sep,quote = quote)\n\n  return(data)\n}\n\n\n\n\nall_column <- function()\n{\n  allcolumn <- names(data)\n}\n\n\nall_coloumn1 <- function()\n{\n  \n  v2 <- c()\n  for(i in 1: length(data))\n  {\n    \n    if(class(data[,i]) == 'integer' || class(data[,i]) == 'numeric' )\n    { \n      \n      v2 <-  c(v2,names(data[i]))\n\n    }\n    \n  }\n  v2\n  \n}\n\n\n\nplotDensity <- function(colname,colname1)\n{\n  \n  data_value <- subset(copy(data),select=c(colname,colname1));\n  names(data_value) <- c(colname,colname1);\n  data_value <- na.omit(data_value);\n  \n  par(mfrow=c(2,1));\n  hist(data_value[,colname1],xlab=paste(\"Value:\",colname),main = 'Histogram',xlim=c(min(data_value[,colname1]),max(data_value[,colname1])));\n  sm.density.compare(as.numeric(data_value[,colname1]),group = data_value[,colname], xlab=paste(\"Value:\",colname),xlim=c(min(data_value[,colname1]),max(data_value[,colname1])));\n  title(\"Density compare\");\n  legend(\"topright\",levels(as.factor(data_value[,colname])), fill=c(2:(2+length(levels(as.factor(data_value[,colname]))))),cex=1);\n  \n  \n}\n\n\nplotCaseStats <- function(col_name)\n{\n\n  data[,col_name] <- as.factor(data[,col_name])\n  out <- table(data[,col_name])\n  \n  linch <-  max(strwidth(out, \"inch\")+0.7, na.rm = TRUE)\n  par(mai=c(1.02,linch,0.82,0.42))\n  x <- barplot(out,horiz = TRUE,cex.names=0.9,las=1,xlab=paste(\"# of Wafers\"),xlim=c(0,max(out,na.rm=TRUE)+50),col=\"cornflowerblue\")\n  text(out+pmin((5+out*0.7),20),x,labels=round(out), col=\"black\",cex=0.75)\n  \n}\n\n\ncreateSummaryTable <- suppressWarnings(function()\n{\n  v1 <- c()\n  for(i in 1: length(data))\n  {\n    \n    if(class(data[,i]) == 'integer' || class(data[,i]) == 'numeric')\n    { \n      \n      v1 <-  c(v1,names(data[i]))\n      \n    }\n  }\n  \n  \n  \n  data_old <- subset(data,select=v1);\n  data_value <- copy(data_old[,1:ncol(data_old)]);\n  \n  return(t(stat.desc(data_value)))\n\n}\n)\n\nplotCorrGram <- function(no_cols)\n{\n  \n  # Exclude timestamp and FAIL, as they are not  numerical\n  v1 <- c()\n  for(i in 1: length(data))\n  {\n    \n    if(class(data[,i]) == 'integer' || class(data[,i]) == 'numeric' )\n    { \n      \n      v1 <-  c(v1,names(data[i]))\n      \n    }\n    \n  }\n  data_value <- subset(copy(data),select=v1);\n  \n  \n  columns.to.keep<-names(which(colMeans(is.na(data_value)) < 0.5)) # this removes those columns with more than 50% NULLs\n  data_value<-subset(data_value,select = columns.to.keep) #the columns will stay which has less than 50% NAs\n  \n  \nif (no_cols > ncol(data_value))\n {\n   no_cols <- ncol(data_value);\n }\n  \n  data_value <-  data_value[,1:no_cols];\n  \n  M <- cor(data_value,use = 'pairwise.complete.obs')\n  col3 <- colorRampPalette(c(\"red\", \"white\", \"blue\")) \n  corrplot(M, method=\"color\",col = col3(20),tl.col=\"black\",na.label=\" \",tl.cex=0.5)\n  \n}\n\n\nfindTop100Features <- function(input_data,featuresno)\n{\n  \n  library(entropy)\n  H.x <- entropy(table(input_data[,yVar]))\n  v1 <- c()\n  for(i in 1: length(input_data))\n  {\n    \n    if(class(input_data[,i]) == 'integer' || class(input_data[,i]) == 'numeric')\n    { \n      \n      v1 <-  c(v1,names(input_data[i]))\n      \n    }\n    \n  }\n  data_value <- subset(input_data,select=v1);\n  mi <- apply(data_value, 2, function(col) { H.x + entropy(table(col)) - entropy(table(input_data[,yVar], col))})\n  sort_vect <- sort(mi, decreasing=TRUE)\n  \n  sort_vect <- as.data.frame(sort_vect)\n  \n  d3 <- data.frame(row.names(sort_vect),sort_vect$sort_vect)\n  names(d3)<-c(\"Variable\",\"importance\")\n  d2 <- data.frame(names(sort_vect), t(sort_vect))\n  importance.v <- data.frame(Variable=d3$Variable,Importance=d3$importance); \n  #v <- (importance.v[1:length(v1),1]) \n  l <- length(v1)\n  if(featuresno > l)\n  {\n  return(importance.v[1:l,])\n  }else{\n    return(importance.v[1:featuresno,])\n  }\n}\n\n",
    "created" : 1505366549351.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1997757148",
    "id" : "4BA11442",
    "lastKnownWriteTime" : 1505966861,
    "last_content_update" : 1505966861839,
    "path" : "C:/Users/A664134/Downloads/final_task/functions.R",
    "project_path" : "functions.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}